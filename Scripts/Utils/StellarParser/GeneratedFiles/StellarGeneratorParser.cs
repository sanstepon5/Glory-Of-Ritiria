//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\programs\Godot\GloryOfRitiria\Parsers\StellarSystemParser\StellarGenerator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace StellarSystemParser {

    using System.Globalization;
    using GloryOfRitiria.Scripts.Utils.StellarParser;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class StellarGeneratorParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, INT=34, FLOAT=35, ID=36, WORD=37, TEXT=38, WHITESPACE=39, 
		COMMENT=40, NEWLINE=41;
	public const int
		RULE_file = 0, RULE_stellar_system = 1, RULE_stellar_system_body = 2, 
		RULE_star = 3, RULE_star_body = 4, RULE_celestial_body = 5, RULE_celestial_body_body = 6, 
		RULE_satellites = 7, RULE_shipyards = 8, RULE_shipyard = 9, RULE_shipyard_body = 10, 
		RULE_ships = 11, RULE_ship = 12, RULE_ship_body = 13, RULE_modules = 14, 
		RULE_module = 15, RULE_name = 16, RULE_icon = 17, RULE_body_type = 18, 
		RULE_ship_size = 19, RULE_distance_from = 20, RULE_angle = 21, RULE_pull = 22, 
		RULE_body_distance = 23, RULE_scientific_potential = 24, RULE_building_progress = 25, 
		RULE_star_class = 26, RULE_discovery_status = 27, RULE_id = 28, RULE_text = 29, 
		RULE_inty = 30, RULE_floaty = 31;
	public static readonly string[] ruleNames = {
		"file", "stellar_system", "stellar_system_body", "star", "star_body", 
		"celestial_body", "celestial_body_body", "satellites", "shipyards", "shipyard", 
		"shipyard_body", "ships", "ship", "ship_body", "modules", "module", "name", 
		"icon", "body_type", "ship_size", "distance_from", "angle", "pull", "body_distance", 
		"scientific_potential", "building_progress", "star_class", "discovery_status", 
		"id", "text", "inty", "floaty"
	};

	private static readonly string[] _LiteralNames = {
		null, "'stellar_system'", "'{'", "'}'", "'star'", "'celestial_body'", 
		"'satellites'", "'shipyards'", "'shipyard'", "'ships'", "'ship'", "'modules'", 
		"'module'", "'durability'", "':'", "'name'", "'icon'", "'type'", "'known'", 
		"'size'", "'distance_from_detnura'", "'map_angle'", "'gravitational_pull'", 
		"'distance'", "'science'", "'building_progress'", "'star_class'", "'orange_dwarf'", 
		"'red_dwarf'", "'yellow_dwarf'", "'discovery_status'", "'explored'", "'existence_known'", 
		"'undiscovered'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "INT", "FLOAT", 
		"ID", "WORD", "TEXT", "WHITESPACE", "COMMENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StellarGenerator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public StellarGeneratorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(StellarGeneratorParser.Eof, 0); }
		public Stellar_systemContext[] stellar_system() {
			return GetRuleContexts<Stellar_systemContext>();
		}
		public Stellar_systemContext stellar_system(int i) {
			return GetRuleContext<Stellar_systemContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			StelSysGen.pt(StellarGeneratorPoint.Initmap);
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 65; stellar_system();
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__0 );
			StelSysGen.pt(StellarGeneratorPoint.Errorverification);
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stellar_systemContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Stellar_system_bodyContext stellar_system_body() {
			return GetRuleContext<Stellar_system_bodyContext>(0);
		}
		public Stellar_systemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stellar_system; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterStellar_system(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitStellar_system(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStellar_system(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stellar_systemContext stellar_system() {
		Stellar_systemContext _localctx = new Stellar_systemContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_stellar_system);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(T__0);
			State = 74; id();
			StelSysGen.pt(StellarGeneratorPoint.Initsystem);
			State = 76; Match(T__1);
			State = 77; stellar_system_body();
			State = 78; Match(T__2);
			StelSysGen.pt(StellarGeneratorPoint.Addsystem);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stellar_system_bodyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Distance_fromContext distance_from() {
			return GetRuleContext<Distance_fromContext>(0);
		}
		public AngleContext angle() {
			return GetRuleContext<AngleContext>(0);
		}
		public PullContext pull() {
			return GetRuleContext<PullContext>(0);
		}
		public StarContext[] star() {
			return GetRuleContexts<StarContext>();
		}
		public StarContext star(int i) {
			return GetRuleContext<StarContext>(i);
		}
		public Stellar_system_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stellar_system_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterStellar_system_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitStellar_system_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStellar_system_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stellar_system_bodyContext stellar_system_body() {
		Stellar_system_bodyContext _localctx = new Stellar_system_bodyContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stellar_system_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; name();
			StelSysGen.pt(StellarGeneratorPoint.Setsystemname);
			State = 83; distance_from();
			State = 84; angle();
			State = 85; pull();
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 86; star();
				StelSysGen.pt(StellarGeneratorPoint.Addstar);
				}
				}
				State = 91;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__3 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StarContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Star_bodyContext star_body() {
			return GetRuleContext<Star_bodyContext>(0);
		}
		public StarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterStar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitStar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StarContext star() {
		StarContext _localctx = new StarContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_star);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(T__3);
			State = 94; id();
			StelSysGen.pt(StellarGeneratorPoint.Initstar);
			State = 96; Match(T__1);
			State = 97; star_body();
			State = 98; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_bodyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Star_classContext star_class() {
			return GetRuleContext<Star_classContext>(0);
		}
		public Discovery_statusContext discovery_status() {
			return GetRuleContext<Discovery_statusContext>(0);
		}
		public Celestial_bodyContext[] celestial_body() {
			return GetRuleContexts<Celestial_bodyContext>();
		}
		public Celestial_bodyContext celestial_body(int i) {
			return GetRuleContext<Celestial_bodyContext>(i);
		}
		public ShipsContext[] ships() {
			return GetRuleContexts<ShipsContext>();
		}
		public ShipsContext ships(int i) {
			return GetRuleContext<ShipsContext>(i);
		}
		public Star_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterStar_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitStar_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_bodyContext star_body() {
		Star_bodyContext _localctx = new Star_bodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_star_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; name();
			StelSysGen.pt(StellarGeneratorPoint.Setstarname);
			State = 103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__25) {
				{
				State = 102; star_class();
				}
			}

			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__29) {
				{
				State = 105; discovery_status();
				}
			}

			State = 113;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__4) {
				{
				{
				State = 108; celestial_body();
				StelSysGen.pt(StellarGeneratorPoint.Addbodytostar);
				}
				}
				State = 115;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 116; ships();
				}
				}
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Celestial_bodyContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Celestial_body_bodyContext celestial_body_body() {
			return GetRuleContext<Celestial_body_bodyContext>(0);
		}
		public Celestial_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_celestial_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterCelestial_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitCelestial_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCelestial_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Celestial_bodyContext celestial_body() {
		Celestial_bodyContext _localctx = new Celestial_bodyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_celestial_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(T__4);
			State = 123; id();
			StelSysGen.pt(StellarGeneratorPoint.Initbody);
			State = 125; Match(T__1);
			State = 126; celestial_body_body();
			State = 127; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Celestial_body_bodyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Body_typeContext body_type() {
			return GetRuleContext<Body_typeContext>(0);
		}
		public Body_distanceContext body_distance() {
			return GetRuleContext<Body_distanceContext>(0);
		}
		public IconContext icon() {
			return GetRuleContext<IconContext>(0);
		}
		public Discovery_statusContext discovery_status() {
			return GetRuleContext<Discovery_statusContext>(0);
		}
		public Scientific_potentialContext scientific_potential() {
			return GetRuleContext<Scientific_potentialContext>(0);
		}
		public SatellitesContext[] satellites() {
			return GetRuleContexts<SatellitesContext>();
		}
		public SatellitesContext satellites(int i) {
			return GetRuleContext<SatellitesContext>(i);
		}
		public ShipyardsContext[] shipyards() {
			return GetRuleContexts<ShipyardsContext>();
		}
		public ShipyardsContext shipyards(int i) {
			return GetRuleContext<ShipyardsContext>(i);
		}
		public ShipsContext[] ships() {
			return GetRuleContexts<ShipsContext>();
		}
		public ShipsContext ships(int i) {
			return GetRuleContext<ShipsContext>(i);
		}
		public Celestial_body_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_celestial_body_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterCelestial_body_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitCelestial_body_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCelestial_body_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Celestial_body_bodyContext celestial_body_body() {
		Celestial_body_bodyContext _localctx = new Celestial_body_bodyContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_celestial_body_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; name();
			StelSysGen.pt(StellarGeneratorPoint.Setbodyname);
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__22) {
				{
				State = 131; body_distance();
				}
			}

			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__15) {
				{
				State = 134; icon();
				StelSysGen.pt(StellarGeneratorPoint.Setbodyicon);
				}
			}

			State = 140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__29) {
				{
				State = 139; discovery_status();
				}
			}

			State = 143;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__23) {
				{
				State = 142; scientific_potential();
				}
			}

			State = 145; body_type();
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__5) {
				{
				{
				State = 146; satellites();
				StelSysGen.pt(StellarGeneratorPoint.Setisntsatellite);
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__6) {
				{
				{
				State = 154; shipyards();
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 163;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 160; ships();
				}
				}
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SatellitesContext : ParserRuleContext {
		public Celestial_bodyContext[] celestial_body() {
			return GetRuleContexts<Celestial_bodyContext>();
		}
		public Celestial_bodyContext celestial_body(int i) {
			return GetRuleContext<Celestial_bodyContext>(i);
		}
		public SatellitesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_satellites; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterSatellites(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitSatellites(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSatellites(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SatellitesContext satellites() {
		SatellitesContext _localctx = new SatellitesContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_satellites);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(T__5);
			StelSysGen.pt(StellarGeneratorPoint.Setissatellite);
			State = 168; Match(T__1);
			State = 172;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 169; celestial_body();
				StelSysGen.pt(StellarGeneratorPoint.Addsatellitetoparent);
				}
				}
				State = 174;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__4 );
			State = 176; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipyardsContext : ParserRuleContext {
		public ShipyardContext[] shipyard() {
			return GetRuleContexts<ShipyardContext>();
		}
		public ShipyardContext shipyard(int i) {
			return GetRuleContext<ShipyardContext>(i);
		}
		public ShipyardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipyards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShipyards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShipyards(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipyards(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipyardsContext shipyards() {
		ShipyardsContext _localctx = new ShipyardsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_shipyards);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(T__6);
			State = 179; Match(T__1);
			State = 183;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 180; shipyard();
				StelSysGen.pt(StellarGeneratorPoint.Addshipyard);
				}
				}
				State = 185;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__7 );
			State = 187; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipyardContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Shipyard_bodyContext shipyard_body() {
			return GetRuleContext<Shipyard_bodyContext>(0);
		}
		public ShipyardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipyard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShipyard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShipyard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipyard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipyardContext shipyard() {
		ShipyardContext _localctx = new ShipyardContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_shipyard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(T__7);
			State = 190; id();
			State = 191; Match(T__1);
			State = 192; shipyard_body();
			State = 193; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shipyard_bodyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ShipContext ship() {
			return GetRuleContext<ShipContext>(0);
		}
		public Shipyard_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shipyard_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShipyard_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShipyard_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShipyard_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shipyard_bodyContext shipyard_body() {
		Shipyard_bodyContext _localctx = new Shipyard_bodyContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_shipyard_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; name();
			StelSysGen.pt(StellarGeneratorPoint.Initshipyard);
			State = 201;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__9) {
				{
				StelSysGen.pt(StellarGeneratorPoint.Setshipyardbusy);
				State = 198; ship();
				StelSysGen.pt(StellarGeneratorPoint.Addtoshipyard);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipsContext : ParserRuleContext {
		public ShipContext[] ship() {
			return GetRuleContexts<ShipContext>();
		}
		public ShipContext ship(int i) {
			return GetRuleContext<ShipContext>(i);
		}
		public ShipsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ships; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShips(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShips(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShips(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipsContext ships() {
		ShipsContext _localctx = new ShipsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ships);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(T__8);
			State = 204; Match(T__1);
			State = 210;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9) {
				{
				{
				State = 205; ship();
				StelSysGen.pt(StellarGeneratorPoint.Addship);
				}
				}
				State = 212;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 213; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShipContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public Ship_bodyContext ship_body() {
			return GetRuleContext<Ship_bodyContext>(0);
		}
		public ShipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ship; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShip(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShipContext ship() {
		ShipContext _localctx = new ShipContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_ship);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(T__9);
			State = 216; id();
			State = 217; Match(T__1);
			State = 218; ship_body();
			State = 219; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ship_bodyContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Ship_sizeContext ship_size() {
			return GetRuleContext<Ship_sizeContext>(0);
		}
		public Building_progressContext building_progress() {
			return GetRuleContext<Building_progressContext>(0);
		}
		public ModulesContext[] modules() {
			return GetRuleContexts<ModulesContext>();
		}
		public ModulesContext modules(int i) {
			return GetRuleContext<ModulesContext>(i);
		}
		public Ship_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ship_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShip_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShip_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShip_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ship_bodyContext ship_body() {
		Ship_bodyContext _localctx = new Ship_bodyContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_ship_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; name();
			StelSysGen.pt(StellarGeneratorPoint.Initship);
			State = 223; ship_size();
			StelSysGen.pt(StellarGeneratorPoint.Setshipsize);
			State = 228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__24) {
				{
				State = 225; building_progress();
				StelSysGen.pt(StellarGeneratorPoint.Setshipyardbuildingprogress);
				}
			}

			State = 233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 230; modules();
				}
				}
				State = 235;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModulesContext : ParserRuleContext {
		public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ModulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterModules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitModules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModulesContext modules() {
		ModulesContext _localctx = new ModulesContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_modules);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(T__10);
			State = 237; Match(T__1);
			State = 241;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 238; module();
				StelSysGen.pt(StellarGeneratorPoint.Addmodule);
				}
				}
				State = 243;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==T__11 );
			State = 245; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IntyContext inty() {
			return GetRuleContext<IntyContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(T__11);
			State = 248; id();
			StelSysGen.pt(StellarGeneratorPoint.Initmodule);
			State = 257;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 250; Match(T__1);
				State = 251; Match(T__12);
				State = 252; Match(T__13);
				State = 253; inty();
				StelSysGen.pt(StellarGeneratorPoint.Setmoduledurability);
				State = 255; Match(T__2);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(T__14);
			State = 260; Match(T__13);
			State = 261; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public IconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_icon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterIcon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitIcon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IconContext icon() {
		IconContext _localctx = new IconContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_icon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__15);
			State = 264; Match(T__13);
			State = 265; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_typeContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Body_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterBody_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitBody_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_typeContext body_type() {
		Body_typeContext _localctx = new Body_typeContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_body_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(T__16);
			State = 268; Match(T__13);
			State = 269; text();
			StelSysGen.pt(StellarGeneratorPoint.Setbodytype);
			State = 273;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__17) {
				{
				State = 271; Match(T__17);
				StelSysGen.pt(StellarGeneratorPoint.SetBodyTypeKnown);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ship_sizeContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Ship_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ship_size; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterShip_size(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitShip_size(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShip_size(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ship_sizeContext ship_size() {
		Ship_sizeContext _localctx = new Ship_sizeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_ship_size);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(T__18);
			State = 276; Match(T__13);
			State = 277; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distance_fromContext : ParserRuleContext {
		public FloatyContext floaty() {
			return GetRuleContext<FloatyContext>(0);
		}
		public Distance_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distance_from; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterDistance_from(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitDistance_from(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistance_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Distance_fromContext distance_from() {
		Distance_fromContext _localctx = new Distance_fromContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_distance_from);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(T__19);
			State = 280; Match(T__13);
			State = 281; floaty();
			StelSysGen.pt(StellarGeneratorPoint.Setsystemdistance);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AngleContext : ParserRuleContext {
		public IntyContext inty() {
			return GetRuleContext<IntyContext>(0);
		}
		public AngleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_angle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterAngle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitAngle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAngle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AngleContext angle() {
		AngleContext _localctx = new AngleContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_angle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(T__20);
			State = 285; Match(T__13);
			State = 286; inty();
			StelSysGen.pt(StellarGeneratorPoint.Setsystemangle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PullContext : ParserRuleContext {
		public IntyContext inty() {
			return GetRuleContext<IntyContext>(0);
		}
		public PullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pull; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterPull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitPull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PullContext pull() {
		PullContext _localctx = new PullContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_pull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(T__21);
			State = 290; Match(T__13);
			State = 291; inty();
			StelSysGen.pt(StellarGeneratorPoint.Setsystempull);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_distanceContext : ParserRuleContext {
		public FloatyContext floaty() {
			return GetRuleContext<FloatyContext>(0);
		}
		public Body_distanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_distance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterBody_distance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitBody_distance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody_distance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Body_distanceContext body_distance() {
		Body_distanceContext _localctx = new Body_distanceContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_body_distance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(T__22);
			State = 295; Match(T__13);
			State = 296; floaty();
			StelSysGen.pt(StellarGeneratorPoint.Setbodydistance);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scientific_potentialContext : ParserRuleContext {
		public FloatyContext floaty() {
			return GetRuleContext<FloatyContext>(0);
		}
		public Scientific_potentialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific_potential; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterScientific_potential(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitScientific_potential(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientific_potential(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scientific_potentialContext scientific_potential() {
		Scientific_potentialContext _localctx = new Scientific_potentialContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_scientific_potential);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(T__23);
			State = 300; Match(T__13);
			State = 301; floaty();
			StelSysGen.pt(StellarGeneratorPoint.Setbodyscience);
			State = 305;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__17) {
				{
				State = 303; Match(T__17);
				StelSysGen.pt(StellarGeneratorPoint.SetScienceKnown);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Building_progressContext : ParserRuleContext {
		public IntyContext inty() {
			return GetRuleContext<IntyContext>(0);
		}
		public Building_progressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_building_progress; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterBuilding_progress(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitBuilding_progress(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuilding_progress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Building_progressContext building_progress() {
		Building_progressContext _localctx = new Building_progressContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_building_progress);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(T__24);
			State = 308; Match(T__13);
			State = 309; inty();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_classContext : ParserRuleContext {
		public Star_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterStar_class(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitStar_class(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_class(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_classContext star_class() {
		Star_classContext _localctx = new Star_classContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_star_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__25);
			State = 312; Match(T__13);
			State = 319;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__26:
				{
				State = 313; Match(T__26);
				StelSysGen.pt(StellarGeneratorPoint.Setstarclassod);
				}
				break;
			case T__27:
				{
				State = 315; Match(T__27);
				StelSysGen.pt(StellarGeneratorPoint.Setstarclassrd);
				}
				break;
			case T__28:
				{
				State = 317; Match(T__28);
				StelSysGen.pt(StellarGeneratorPoint.Setstarclassyd);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Discovery_statusContext : ParserRuleContext {
		public Discovery_statusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discovery_status; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterDiscovery_status(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitDiscovery_status(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscovery_status(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Discovery_statusContext discovery_status() {
		Discovery_statusContext _localctx = new Discovery_statusContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_discovery_status);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(T__29);
			State = 322; Match(T__13);
			State = 329;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__30:
				{
				State = 323; Match(T__30);
				StelSysGen.pt(StellarGeneratorPoint.Setstatusexplored);
				}
				break;
			case T__31:
				{
				State = 325; Match(T__31);
				StelSysGen.pt(StellarGeneratorPoint.Setstatusknown);
				}
				break;
			case T__32:
				{
				State = 327; Match(T__32);
				StelSysGen.pt(StellarGeneratorPoint.Setstatusundiscovered);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(StellarGeneratorParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; _localctx._ID = Match(ID);
			StelSysGen.CurrentText = (_localctx._ID!=null?_localctx._ID.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public IToken _TEXT;
		public ITerminalNode TEXT() { return GetToken(StellarGeneratorParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; _localctx._TEXT = Match(TEXT);
			StelSysGen.CurrentText = (_localctx._TEXT!=null?_localctx._TEXT.Text:null).Replace('"', ' ').Trim();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntyContext : ParserRuleContext {
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(StellarGeneratorParser.INT, 0); }
		public IntyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterInty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitInty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntyContext inty() {
		IntyContext _localctx = new IntyContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_inty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; _localctx._INT = Match(INT);
			StelSysGen.CurrentInt = int.Parse((_localctx._INT!=null?_localctx._INT.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatyContext : ParserRuleContext {
		public IToken _FLOAT;
		public ITerminalNode FLOAT() { return GetToken(StellarGeneratorParser.FLOAT, 0); }
		public FloatyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floaty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.EnterFloaty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IStellarGeneratorListener typedListener = listener as IStellarGeneratorListener;
			if (typedListener != null) typedListener.ExitFloaty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStellarGeneratorVisitor<TResult> typedVisitor = visitor as IStellarGeneratorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloaty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatyContext floaty() {
		FloatyContext _localctx = new FloatyContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_floaty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; _localctx._FLOAT = Match(FLOAT);
			StelSysGen.CurrentFloat = float.Parse((_localctx._FLOAT!=null?_localctx._FLOAT.Text:null), CultureInfo.InvariantCulture);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3+\x15A\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x3\x2\x6\x2\x45\n\x2\r\x2\xE\x2\x46\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x6\x4\\\n\x4\r\x4\xE\x4]\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x5\x6j\n\x6\x3\x6\x5\x6m\n\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6r\n\x6\f\x6\xE\x6u\v\x6\x3\x6\a\x6x\n\x6\f\x6\xE\x6"+
		"{\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\x87\n\b"+
		"\x3\b\x3\b\x3\b\x5\b\x8C\n\b\x3\b\x5\b\x8F\n\b\x3\b\x5\b\x92\n\b\x3\b"+
		"\x3\b\x3\b\x3\b\a\b\x98\n\b\f\b\xE\b\x9B\v\b\x3\b\a\b\x9E\n\b\f\b\xE\b"+
		"\xA1\v\b\x3\b\a\b\xA4\n\b\f\b\xE\b\xA7\v\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x6\t\xAF\n\t\r\t\xE\t\xB0\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x6\n\xBA"+
		"\n\n\r\n\xE\n\xBB\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\xCC\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xD3\n\r\f"+
		"\r\xE\r\xD6\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xE7\n\xF\x3\xF\a\xF\xEA\n\xF\f"+
		"\xF\xE\xF\xED\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x6\x10\xF4\n\x10"+
		"\r\x10\xE\x10\xF5\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x104\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x5\x14\x114\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x134\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x142\n"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x14C"+
		"\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3"+
		"!\x3!\x2\x2\x2\"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2"+
		".\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x2\x2\x154\x2"+
		"\x42\x3\x2\x2\x2\x4K\x3\x2\x2\x2\x6S\x3\x2\x2\x2\b_\x3\x2\x2\x2\n\x66"+
		"\x3\x2\x2\x2\f|\x3\x2\x2\x2\xE\x83\x3\x2\x2\x2\x10\xA8\x3\x2\x2\x2\x12"+
		"\xB4\x3\x2\x2\x2\x14\xBF\x3\x2\x2\x2\x16\xC5\x3\x2\x2\x2\x18\xCD\x3\x2"+
		"\x2\x2\x1A\xD9\x3\x2\x2\x2\x1C\xDF\x3\x2\x2\x2\x1E\xEE\x3\x2\x2\x2 \xF9"+
		"\x3\x2\x2\x2\"\x105\x3\x2\x2\x2$\x109\x3\x2\x2\x2&\x10D\x3\x2\x2\x2(\x115"+
		"\x3\x2\x2\x2*\x119\x3\x2\x2\x2,\x11E\x3\x2\x2\x2.\x123\x3\x2\x2\x2\x30"+
		"\x128\x3\x2\x2\x2\x32\x12D\x3\x2\x2\x2\x34\x135\x3\x2\x2\x2\x36\x139\x3"+
		"\x2\x2\x2\x38\x143\x3\x2\x2\x2:\x14D\x3\x2\x2\x2<\x150\x3\x2\x2\x2>\x153"+
		"\x3\x2\x2\x2@\x156\x3\x2\x2\x2\x42\x44\b\x2\x1\x2\x43\x45\x5\x4\x3\x2"+
		"\x44\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2"+
		"\x2\x2GH\x3\x2\x2\x2HI\b\x2\x1\x2IJ\a\x2\x2\x3J\x3\x3\x2\x2\x2KL\a\x3"+
		"\x2\x2LM\x5:\x1E\x2MN\b\x3\x1\x2NO\a\x4\x2\x2OP\x5\x6\x4\x2PQ\a\x5\x2"+
		"\x2QR\b\x3\x1\x2R\x5\x3\x2\x2\x2ST\x5\"\x12\x2TU\b\x4\x1\x2UV\x5*\x16"+
		"\x2VW\x5,\x17\x2W[\x5.\x18\x2XY\x5\b\x5\x2YZ\b\x4\x1\x2Z\\\x3\x2\x2\x2"+
		"[X\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\a\x3\x2\x2"+
		"\x2_`\a\x6\x2\x2`\x61\x5:\x1E\x2\x61\x62\b\x5\x1\x2\x62\x63\a\x4\x2\x2"+
		"\x63\x64\x5\n\x6\x2\x64\x65\a\x5\x2\x2\x65\t\x3\x2\x2\x2\x66g\x5\"\x12"+
		"\x2gi\b\x6\x1\x2hj\x5\x36\x1C\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2"+
		"\x2km\x5\x38\x1D\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2ms\x3\x2\x2\x2no\x5\f\a"+
		"\x2op\b\x6\x1\x2pr\x3\x2\x2\x2qn\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2"+
		"\x2st\x3\x2\x2\x2ty\x3\x2\x2\x2us\x3\x2\x2\x2vx\x5\x18\r\x2wv\x3\x2\x2"+
		"\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\v\x3\x2\x2\x2{y\x3\x2\x2"+
		"\x2|}\a\a\x2\x2}~\x5:\x1E\x2~\x7F\b\a\x1\x2\x7F\x80\a\x4\x2\x2\x80\x81"+
		"\x5\xE\b\x2\x81\x82\a\x5\x2\x2\x82\r\x3\x2\x2\x2\x83\x84\x5\"\x12\x2\x84"+
		"\x86\b\b\x1\x2\x85\x87\x5\x30\x19\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2"+
		"\x2\x2\x87\x8B\x3\x2\x2\x2\x88\x89\x5$\x13\x2\x89\x8A\b\b\x1\x2\x8A\x8C"+
		"\x3\x2\x2\x2\x8B\x88\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2"+
		"\x2\x8D\x8F\x5\x38\x1D\x2\x8E\x8D\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F"+
		"\x91\x3\x2\x2\x2\x90\x92\x5\x32\x1A\x2\x91\x90\x3\x2\x2\x2\x91\x92\x3"+
		"\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x99\x5&\x14\x2\x94\x95\x5\x10\t\x2\x95"+
		"\x96\b\b\x1\x2\x96\x98\x3\x2\x2\x2\x97\x94\x3\x2\x2\x2\x98\x9B\x3\x2\x2"+
		"\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9F\x3\x2\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9C\x9E\x5\x12\n\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3\x2\x2"+
		"\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA5\x3\x2\x2\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA2\xA4\x5\x18\r\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA7\x3\x2\x2"+
		"\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xF\x3\x2\x2\x2\xA7\xA5"+
		"\x3\x2\x2\x2\xA8\xA9\a\b\x2\x2\xA9\xAA\b\t\x1\x2\xAA\xAE\a\x4\x2\x2\xAB"+
		"\xAC\x5\f\a\x2\xAC\xAD\b\t\x1\x2\xAD\xAF\x3\x2\x2\x2\xAE\xAB\x3\x2\x2"+
		"\x2\xAF\xB0\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2"+
		"\x3\x2\x2\x2\xB2\xB3\a\x5\x2\x2\xB3\x11\x3\x2\x2\x2\xB4\xB5\a\t\x2\x2"+
		"\xB5\xB9\a\x4\x2\x2\xB6\xB7\x5\x14\v\x2\xB7\xB8\b\n\x1\x2\xB8\xBA\x3\x2"+
		"\x2\x2\xB9\xB6\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB"+
		"\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE\a\x5\x2\x2\xBE\x13\x3\x2"+
		"\x2\x2\xBF\xC0\a\n\x2\x2\xC0\xC1\x5:\x1E\x2\xC1\xC2\a\x4\x2\x2\xC2\xC3"+
		"\x5\x16\f\x2\xC3\xC4\a\x5\x2\x2\xC4\x15\x3\x2\x2\x2\xC5\xC6\x5\"\x12\x2"+
		"\xC6\xCB\b\f\x1\x2\xC7\xC8\b\f\x1\x2\xC8\xC9\x5\x1A\xE\x2\xC9\xCA\b\f"+
		"\x1\x2\xCA\xCC\x3\x2\x2\x2\xCB\xC7\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC"+
		"\x17\x3\x2\x2\x2\xCD\xCE\a\v\x2\x2\xCE\xD4\a\x4\x2\x2\xCF\xD0\x5\x1A\xE"+
		"\x2\xD0\xD1\b\r\x1\x2\xD1\xD3\x3\x2\x2\x2\xD2\xCF\x3\x2\x2\x2\xD3\xD6"+
		"\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD7\x3\x2\x2"+
		"\x2\xD6\xD4\x3\x2\x2\x2\xD7\xD8\a\x5\x2\x2\xD8\x19\x3\x2\x2\x2\xD9\xDA"+
		"\a\f\x2\x2\xDA\xDB\x5:\x1E\x2\xDB\xDC\a\x4\x2\x2\xDC\xDD\x5\x1C\xF\x2"+
		"\xDD\xDE\a\x5\x2\x2\xDE\x1B\x3\x2\x2\x2\xDF\xE0\x5\"\x12\x2\xE0\xE1\b"+
		"\xF\x1\x2\xE1\xE2\x5(\x15\x2\xE2\xE6\b\xF\x1\x2\xE3\xE4\x5\x34\x1B\x2"+
		"\xE4\xE5\b\xF\x1\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE3\x3\x2\x2\x2\xE6\xE7\x3"+
		"\x2\x2\x2\xE7\xEB\x3\x2\x2\x2\xE8\xEA\x5\x1E\x10\x2\xE9\xE8\x3\x2\x2\x2"+
		"\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\x1D\x3"+
		"\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\a\r\x2\x2\xEF\xF3\a\x4\x2\x2\xF0"+
		"\xF1\x5 \x11\x2\xF1\xF2\b\x10\x1\x2\xF2\xF4\x3\x2\x2\x2\xF3\xF0\x3\x2"+
		"\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6"+
		"\xF7\x3\x2\x2\x2\xF7\xF8\a\x5\x2\x2\xF8\x1F\x3\x2\x2\x2\xF9\xFA\a\xE\x2"+
		"\x2\xFA\xFB\x5:\x1E\x2\xFB\x103\b\x11\x1\x2\xFC\xFD\a\x4\x2\x2\xFD\xFE"+
		"\a\xF\x2\x2\xFE\xFF\a\x10\x2\x2\xFF\x100\x5> \x2\x100\x101\b\x11\x1\x2"+
		"\x101\x102\a\x5\x2\x2\x102\x104\x3\x2\x2\x2\x103\xFC\x3\x2\x2\x2\x103"+
		"\x104\x3\x2\x2\x2\x104!\x3\x2\x2\x2\x105\x106\a\x11\x2\x2\x106\x107\a"+
		"\x10\x2\x2\x107\x108\x5<\x1F\x2\x108#\x3\x2\x2\x2\x109\x10A\a\x12\x2\x2"+
		"\x10A\x10B\a\x10\x2\x2\x10B\x10C\x5<\x1F\x2\x10C%\x3\x2\x2\x2\x10D\x10E"+
		"\a\x13\x2\x2\x10E\x10F\a\x10\x2\x2\x10F\x110\x5<\x1F\x2\x110\x113\b\x14"+
		"\x1\x2\x111\x112\a\x14\x2\x2\x112\x114\b\x14\x1\x2\x113\x111\x3\x2\x2"+
		"\x2\x113\x114\x3\x2\x2\x2\x114\'\x3\x2\x2\x2\x115\x116\a\x15\x2\x2\x116"+
		"\x117\a\x10\x2\x2\x117\x118\x5<\x1F\x2\x118)\x3\x2\x2\x2\x119\x11A\a\x16"+
		"\x2\x2\x11A\x11B\a\x10\x2\x2\x11B\x11C\x5@!\x2\x11C\x11D\b\x16\x1\x2\x11D"+
		"+\x3\x2\x2\x2\x11E\x11F\a\x17\x2\x2\x11F\x120\a\x10\x2\x2\x120\x121\x5"+
		"> \x2\x121\x122\b\x17\x1\x2\x122-\x3\x2\x2\x2\x123\x124\a\x18\x2\x2\x124"+
		"\x125\a\x10\x2\x2\x125\x126\x5> \x2\x126\x127\b\x18\x1\x2\x127/\x3\x2"+
		"\x2\x2\x128\x129\a\x19\x2\x2\x129\x12A\a\x10\x2\x2\x12A\x12B\x5@!\x2\x12B"+
		"\x12C\b\x19\x1\x2\x12C\x31\x3\x2\x2\x2\x12D\x12E\a\x1A\x2\x2\x12E\x12F"+
		"\a\x10\x2\x2\x12F\x130\x5@!\x2\x130\x133\b\x1A\x1\x2\x131\x132\a\x14\x2"+
		"\x2\x132\x134\b\x1A\x1\x2\x133\x131\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2"+
		"\x134\x33\x3\x2\x2\x2\x135\x136\a\x1B\x2\x2\x136\x137\a\x10\x2\x2\x137"+
		"\x138\x5> \x2\x138\x35\x3\x2\x2\x2\x139\x13A\a\x1C\x2\x2\x13A\x141\a\x10"+
		"\x2\x2\x13B\x13C\a\x1D\x2\x2\x13C\x142\b\x1C\x1\x2\x13D\x13E\a\x1E\x2"+
		"\x2\x13E\x142\b\x1C\x1\x2\x13F\x140\a\x1F\x2\x2\x140\x142\b\x1C\x1\x2"+
		"\x141\x13B\x3\x2\x2\x2\x141\x13D\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x142"+
		"\x37\x3\x2\x2\x2\x143\x144\a \x2\x2\x144\x14B\a\x10\x2\x2\x145\x146\a"+
		"!\x2\x2\x146\x14C\b\x1D\x1\x2\x147\x148\a\"\x2\x2\x148\x14C\b\x1D\x1\x2"+
		"\x149\x14A\a#\x2\x2\x14A\x14C\b\x1D\x1\x2\x14B\x145\x3\x2\x2\x2\x14B\x147"+
		"\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x14C\x39\x3\x2\x2\x2\x14D\x14E\a&\x2"+
		"\x2\x14E\x14F\b\x1E\x1\x2\x14F;\x3\x2\x2\x2\x150\x151\a(\x2\x2\x151\x152"+
		"\b\x1F\x1\x2\x152=\x3\x2\x2\x2\x153\x154\a$\x2\x2\x154\x155\b \x1\x2\x155"+
		"?\x3\x2\x2\x2\x156\x157\a%\x2\x2\x157\x158\b!\x1\x2\x158\x41\x3\x2\x2"+
		"\x2\x1B\x46]ilsy\x86\x8B\x8E\x91\x99\x9F\xA5\xB0\xBB\xCB\xD4\xE6\xEB\xF5"+
		"\x103\x113\x133\x141\x14B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace StellarSystemParser
